# Author: Chirag Artani
# IPv6 Vulnerability Simulation Script

import http.server
import socketserver
import json
import threading
import time
import requests
import sys
import subprocess
import random
import string

"""
This script demonstrates a simulated IPv6 packet processing vulnerability.
Created by: Chirag Artani
"""

def generate_unique_filename():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=10)) + '.txt'

unique_filename = generate_unique_filename()

class IPv6Packet:
    def __init__(self, main_header_length, extension_headers):
        self.main_header_length = main_header_length
        self.extension_headers = extension_headers

def process_packet(packet):
    total_length = packet.main_header_length
    for header_length in packet.extension_headers:
        total_length += header_length
    
    buffer = bytearray(64)  # Only 64 bytes allocated
    
    try:
        for i in range(total_length):
            buffer[i] = 0xFF  # Potential out-of-bounds write
        return len(buffer)
    except IndexError:
        print(f"\n*** VULNERABILITY EXPLOITED ***")
        print(f"Creating file: {unique_filename}")
        with open(unique_filename, 'w') as f:
            f.write("This file was created by exploiting the IPv6 vulnerability.")
        subprocess.Popen(f'notepad.exe {unique_filename}')
        return -1  # Indicate exploit succeeded

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        data = json.loads(post_data.decode('utf-8'))
        
        packet = IPv6Packet(data['main_header_length'], data['extension_headers'])
        result = process_packet(packet)
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        response = json.dumps({"status": "success" if result != -1 else "exploited", "buffer_length": result, "proof_file": unique_filename if result == -1 else None})
        self.wfile.write(response.encode('utf-8'))

def run_server():
    with socketserver.TCPServer(("", 8000), RequestHandler) as httpd:
        print("Server running on http://localhost:8000")
        httpd.serve_forever()

def test_server():
    time.sleep(1)  # Wait for server to start
    
    url = "http://localhost:8000"
    
    # Test with normal packet
    normal_data = {
        "main_header_length": 40,
        "extension_headers": [8, 16]
    }
    response = requests.post(url, json=normal_data)
    print("Normal packet:", response.json())
    
    # Test with malicious packet
    malicious_data = {
        "main_header_length": 40,
        "extension_headers": [8, 2**32 - 47]
    }
    try:
        response = requests.post(url, json=malicious_data)
        print("Malicious packet:", response.json())
        if response.json().get("proof_file"):
            print(f"Proof file created: {response.json()['proof_file']}")
    except requests.exceptions.ConnectionError:
        print("Server exploited as expected when processing malicious packet.")

if __name__ == "__main__":
    server_thread = threading.Thread(target=run_server)
    server_thread.start()
    
    test_thread = threading.Thread(target=test_server)
    test_thread.start()
    
    server_thread.join()
    test_thread.join()
